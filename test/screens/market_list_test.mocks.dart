// Mocks generated by Mockito 5.2.0 from annotations
// in betterhodl_flutter/test/screens/market_list_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:ui' as _i11;

import 'package:betterhodl_flutter/constants.dart' as _i7;
import 'package:betterhodl_flutter/core/bloc/coin_bloc.dart' as _i5;
import 'package:betterhodl_flutter/core/bloc/coin_event.dart' as _i9;
import 'package:betterhodl_flutter/core/bloc/coin_state.dart' as _i4;
import 'package:betterhodl_flutter/core/network/socket_service.dart' as _i3;
import 'package:betterhodl_flutter/domain/models/market_coin.dart' as _i6;
import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeClient_0 extends _i1.Fake implements _i2.Client {}

class _FakeSocketService_1 extends _i1.Fake implements _i3.SocketService {}

class _FakeCoinState_2 extends _i1.Fake implements _i4.CoinState {}

/// A class which mocks [CoinBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoinBloc extends _i1.Mock implements _i5.CoinBloc {
  MockCoinBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i6.MarketCoin> get marketCoinMap => (super.noSuchMethod(
      Invocation.getter(#marketCoinMap),
      returnValue: <String, _i6.MarketCoin>{}) as Map<String, _i6.MarketCoin>);
  @override
  set marketCoinMap(Map<String, _i6.MarketCoin>? _marketCoinMap) =>
      super.noSuchMethod(Invocation.setter(#marketCoinMap, _marketCoinMap),
          returnValueForMissingStub: null);
  @override
  _i2.Client get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeClient_0()) as _i2.Client);
  @override
  _i3.SocketService get socketService =>
      (super.noSuchMethod(Invocation.getter(#socketService),
          returnValue: _FakeSocketService_1()) as _i3.SocketService);
  @override
  _i7.SortOrders get sortOrder =>
      (super.noSuchMethod(Invocation.getter(#sortOrder),
          returnValue: _i7.SortOrders.marketCapDesc) as _i7.SortOrders);
  @override
  set sortOrder(_i7.SortOrders? _sortOrder) =>
      super.noSuchMethod(Invocation.setter(#sortOrder, _sortOrder),
          returnValueForMissingStub: null);
  @override
  bool get loading =>
      (super.noSuchMethod(Invocation.getter(#loading), returnValue: false)
          as bool);
  @override
  List<_i6.MarketCoin> get marketCoins =>
      (super.noSuchMethod(Invocation.getter(#marketCoins),
          returnValue: <_i6.MarketCoin>[]) as List<_i6.MarketCoin>);
  @override
  _i4.CoinState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeCoinState_2()) as _i4.CoinState);
  @override
  _i8.Stream<_i4.CoinState> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i4.CoinState>.empty()) as _i8.Stream<_i4.CoinState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  dynamic setLoading(bool? loading) =>
      super.noSuchMethod(Invocation.method(#setLoading, [loading]));
  @override
  dynamic updateMarketCoin(Map<String, dynamic>? priceData) =>
      super.noSuchMethod(Invocation.method(#updateMarketCoin, [priceData]));
  @override
  void add(_i9.CoinEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i9.CoinEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i4.CoinState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i9.CoinEvent>(_i10.EventHandler<E, _i4.CoinState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i9.CoinEvent, _i4.CoinState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onChange(_i10.Change<_i4.CoinState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void addListener(_i11.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i11.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
